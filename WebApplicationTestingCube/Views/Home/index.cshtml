<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Line Total Analysis Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.29.0/apexcharts.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto; /* Center content on the page */
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #007BFF; /* Primary theme color */
        }

        h2 {
            color: #333; /* Darker color for headings */
            border-bottom: 2px solid #007BFF; /* Underline */
            padding-bottom: 10px; /* Space below heading */
            margin-bottom: 20px; /* Space below heading */
        }

        .chart-container {
            background: #fff; /* White background for charts */
            border-radius: 8px; /* Rounded corners */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Drop shadow */
            padding: 20px;
            margin-bottom: 40px; /* Space between chart containers */
        }

        #map {
            height: 400px; /* Fixed height for the map */
            border-radius: 8px; /* Rounded corners for the map */
            margin-bottom: 20px; /* Space below the map */
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Line Total Analysis Dashboard</h1>

        <div class="chart-container">
            <h2>Line Total by Year</h2>
            <div id="chart"></div>
        </div>

        <div class="chart-container">
            <h2>Parallel Line Total by Month and Year</h2>
            <div id="chart2"></div>
        </div>

        <div class="chart-container">
            <h2>Line Total by Region (2013)</h2>
            <div id="map"></div>
        </div>

        <div class="chart-container">
            <h2>Average Line Total by Product (Top 10)</h2>
            <div id="chart4"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.29.0/apexcharts.min.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        // Function to render the first chart
        async function renderFirstChart() {
            const response = await fetch('/api/SSAS/execute/query/1');
            const result = await response.json();

            const categories = result.columns;
            const series = result.data.map(row => ({
                name: row.RowHeader,
                data: categories.map(col => parseFloat(row[col] || 0))
            }));

            const options = {
                chart: { type: 'bar', height: 350 },
                series: series,
                xaxis: { categories: categories },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                tooltip: {
                    y: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                dataLabels: {
                    formatter: function (value) {
                        return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                }
            };

            new ApexCharts(document.querySelector("#chart"), options).render();
        }

        // Function to render the second chart
        async function renderSecondChart() {
            const response = await fetch('/api/SSAS/execute/query/2');
            const result = await response.json();

            const rawMonths = result.columns;
            const rawData = result.data[0];

            const monthOrder = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];

            const uniqueMonths = [...new Set(rawMonths.map(item => item.split(' ')[0]))];
            const sortedMonths = uniqueMonths.sort((a, b) => monthOrder.indexOf(a) - monthOrder.indexOf(b));
            const uniqueYears = [...new Set(rawMonths.map(item => item.split(' ')[1]))];

            const dataByYear = uniqueYears.map(year => ({
                name: year,
                data: sortedMonths.map(month => parseFloat(rawData[`${month} ${year}`] || 0))
            }));

            const options = {
                chart: { type: 'line', height: 350 },
                series: dataByYear,
                xaxis: { categories: sortedMonths },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                tooltip: {
                    y: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                dataLabels: {
                    formatter: function (value) {
                        return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                }
            };

            new ApexCharts(document.querySelector("#chart2"), options).render();
        }

        // Function to render the map
        async function renderMap() {
            const response = await fetch('/api/SSAS/execute/query/3');
            const result = await response.json();
            const map = L.map('map').setView([51.505, -0.09], 2); // Initial map view

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            const data = convertData(result);
            const markers = [];

            // Loop through the data and add markers
            for (const column of data.columns) {
                const value = data.data[0][column];
                const coordinates = regionCoordinates[column];

                if (coordinates && coordinates.lat && coordinates.lng && value !== null) {
                    const marker = L.marker([coordinates.lat, coordinates.lng]).addTo(map);
                    marker.bindPopup(`<b>${column}</b><br>Line Total: ${value}`);
                    markers.push(marker);
                }
            }

            // Auto-fit map to bounds of markers
            if (markers.length > 0) {
                const group = new L.featureGroup(markers);
                map.fitBounds(group.getBounds());
            }
        }

        // Function to convert data into a usable format
        function convertData(originalData) {
            const columns = Object.keys(originalData.data[0]).filter(key => key !== 'RowHeader');
            const transformedData = originalData.data.map(row => {
                const rowData = { RowHeader: row.RowHeader };
                columns.forEach(column => {
                    rowData[column] = row[column];
                });
                return rowData;
            });
            return { columns, data: transformedData };
        }

        // Define coordinates for regions
        const regionCoordinates = {
            'Northwest': { lat: 47.6062, lng: -122.3321 },
            'Northeast': { lat: 40.7128, lng: -74.0060 },
            'Central': { lat: 39.7392, lng: -104.9903 },
            'Southwest': { lat: 33.4484, lng: -112.0740 },
            'Southeast': { lat: 25.7617, lng: -80.1918 },
            'Canada': { lat: 45.4215, lng: -75.6972 },
            'France': { lat: 48.8566, lng: 2.3522 },
            'Germany': { lat: 51.1657, lng: 10.4515 },
            'Australia': { lat: -33.8688, lng: 151.2093 },
            'United Kingdom': { lat: 51.5074, lng: -0.1278 },
            'Unknown': { lat: 0, lng: 0 }
        };

        // Function to render the fourth chart
        async function renderFourthChart() {
            const response = await fetch('/api/SSAS/execute/query/4');
            const result = await response.json();

            const categories = result.columns;
            const series = result.data.map(row => ({
                name: row.RowHeader,
                data: categories.map(col => parseFloat(row[col] || 0))
            }));

            const options = {
                chart: { type: 'bar', height: 350 },
                series: series,
                xaxis: { categories: categories },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                tooltip: {
                    y: {
                        formatter: function (value) {
                            return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                },
                dataLabels: {
                    formatter: function (value) {
                        return value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                } 
                
            };

            new ApexCharts(document.querySelector("#chart4"), options).render();
        }

        // Initialize all charts and map
        renderFirstChart();
        renderSecondChart();
        renderMap();
        renderFourthChart();
    </script>
</body>

</html>